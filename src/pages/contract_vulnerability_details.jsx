import './contract_vulnerability_details.scss';
import React from "react";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faHeart,  } from '@fortawesome/free-regular-svg-icons';
import { faHeart as faHeartFilled, faArrowLeft } from '@fortawesome/free-solid-svg-icons';
import { Tab, Tabs, TabList, TabPanel } from 'menora-react-tabs';
import { firstLetterUppercase, matrixDeviation } from './helpers'

const VulnerabilityDetails = ({showDetector, back, vulnerabilitiesLiked, set_like_vulnerability, set_scan_vulnerability}) => {
  const vulnerability_title = firstLetterUppercase(showDetector[0].id, '_', ' ')

  var overall_risk_level_matrix = []
  var likelihood_level_matrix = []
  var impact_level_matrix = []
  var detectors_desc = {"title": "Descriptions", "content": []}
  var detectors_consequences = {"title": "Consequences", "content": []}

  showDetector.forEach((v,index) => {
    if (index !== 0){
      // console.log(v.description)
      overall_risk_level_matrix.push(v.matrix.Overall_Risk_Level)
      likelihood_level_matrix.push(v.matrix.Likelihood_Level)
      impact_level_matrix.push(v.matrix.Impact_Level)
      detectors_desc.content.push({"detector": v.code, "desc": v.description[0].content})
      detectors_consequences.content.push({"detector": v.code, "desc": v.description[1].content})
    }
  })

  const detectors_matrix = [
    {"title": "Overall Risk Level", "reading": matrixDeviation(overall_risk_level_matrix).toFixed(1)},
    {"title": "Likelihood Level", "reading": matrixDeviation(likelihood_level_matrix).toFixed(1)},
    {"title": "Impact Level", "reading": matrixDeviation(impact_level_matrix).toFixed(1)}
  ]

  const formatted_risk_matrix = detectors_matrix.map(matrix => (
    <div key={matrix.title} className='risk_matrix_item'>
      <span>{matrix.reading}</span> - <span>{matrix.title}</span>
    </div>
  ));

  const tabs = [detectors_desc, detectors_consequences]
  var formatted_tabs_list = tabs.map(tab => (
    <Tab key={tab.title}>{tab.title}</Tab>
  ));
  formatted_tabs_list = <TabList>{formatted_tabs_list}</TabList>
  const formatted_tabs_panel = tabs.map(tab => (
    <TabPanel key={tab.title}>
      <ul>
        <p>This Vulnerability Checker are Capable for the following :-</p>
        {
          tab.content.map(c => {
            return (<li key={c.detector}><span>{c.detector}</span><br/>{c.desc}<br/><br/></li>)
          })
        }
      </ul>
    </TabPanel>
  ));
  
  var like_btn_icon = faHeart
  vulnerabilitiesLiked.map(v => {
    if (v === showDetector[0].id) 
      like_btn_icon = faHeartFilled
  })
  
  const like_btn = <FontAwesomeIcon 
    icon={like_btn_icon}
    onClick={() => set_like_vulnerability(showDetector[0].id)}
  />

  return (
    <div className="vulnerability_details_container">
      <header className="vulnerability_details_header">
        <FontAwesomeIcon 
          icon={faArrowLeft}
          className="back"
          onClick={() => back()}
          />
        <h3>{vulnerability_title}</h3>
        <div className='risk_matrix_container'>
          <span className='left'>Risk Classification Metrix</span>
          <span className='right'>Risk Chart</span>
          <div className='risk_matrix'>
            {formatted_risk_matrix}
          </div>
        </div>
        <div className='action'>
          <div className="like" /*style={{display: "none"}}*/>
            {like_btn}
          </div>
          <button onClick={() => set_scan_vulnerability(showDetector[0])}>Start Scanning</button>
        </div>
      </header>

      <Tabs>
        {formatted_tabs_list}
        {formatted_tabs_panel}
      </Tabs>
    </div>
  )
}

export default VulnerabilityDetails;